<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Anime/Superhero GPT</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600&family=Noto+Sans+JP:wght@300;400;500;600&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary-bg: #ffffff;
            --secondary-bg: #f8f9fa;
            --chat-bg: #fafbfc;
            --border-color: #e1e8ed;
            --text-primary: #1a1a1a;
            --text-secondary: #6b7280;
            --accent-sakura: #ffb7c5;
            --accent-lavender: #c8b6e2;
            --accent-mint: #b8e6d3;
            --accent-peach: #ffd4c4;
            --user-bubble: #667eea;
            --ai-bubble: #ffffff;
            --shadow-light: 0 2px 8px rgba(0,0,0,0.08);
            --shadow-medium: 0 4px 16px rgba(0,0,0,0.12);
            --border-radius: 12px;
            --panel-border: 2px solid var(--border-color);
        }

        [data-theme="dark"] {
            --primary-bg: #1a1a1a;
            --secondary-bg: #2d2d2d;
            --chat-bg: #242424;
            --border-color: #404040;
            --text-primary: #ffffff;
            --text-secondary: #a0a0a0;
            --accent-sakura: #ff8fa3;
            --accent-lavender: #a084ca;
            --accent-mint: #81c9b3;
            --accent-peach: #ffb299;
            --user-bubble: #5a67d8;
            --ai-bubble: #2d2d2d;
            --shadow-light: 0 2px 8px rgba(0,0,0,0.3);
            --shadow-medium: 0 4px 16px rgba(0,0,0,0.4);
            --panel-border: 2px solid var(--border-color);
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: var(--primary-bg);
            color: var(--text-primary);
            height: 100vh;
            display: flex;
            flex-direction: column;
            transition: all 0.3s ease;
        }

        .header {
            background: var(--secondary-bg);
            border-bottom: var(--panel-border);
            padding: 1rem 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: var(--shadow-light);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .logo {
            font-family: 'Noto Sans JP', sans-serif;
            font-size: 1.5rem;
            font-weight: 600;
            background: linear-gradient(135deg, var(--accent-sakura), var(--accent-lavender));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            letter-spacing: -0.02em;
        }

        .header-controls {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .character-select {
            background: var(--primary-bg);
            border: 2px solid var(--border-color);
            border-radius: 50px;
            padding: 0.5rem 1rem;
            color: var(--text-primary);
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .character-select:hover {
            border-color: var(--accent-lavender);
        }

        .theme-toggle {
            background: none;
            border: 2px solid var(--border-color);
            border-radius: 50px;
            padding: 0.5rem 1rem;
            cursor: pointer;
            color: var(--text-secondary);
            font-size: 0.875rem;
            font-weight: 500;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .theme-toggle:hover {
            border-color: var(--accent-lavender);
            color: var(--text-primary);
        }

        .chat-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 1.5rem;
            background: var(--chat-bg);
            scroll-behavior: smooth;
        }

        .message {
            margin-bottom: 1.5rem;
            display: flex;
            align-items: flex-start;
            gap: 0.75rem;
            animation: slideIn 0.3s ease-out;
        }

        .message.user {
            flex-direction: row-reverse;
        }

        .message-bubble {
            max-width: 70%;
            padding: 1rem 1.25rem;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-light);
            position: relative;
            border: var(--panel-border);
        }

        .message.user .message-bubble {
            background: var(--user-bubble);
            color: white;
            border-top-right-radius: 4px;
        }

        .message.ai .message-bubble {
            background: var(--ai-bubble);
            color: var(--text-primary);
            border-top-left-radius: 4px;
            border-left: 4px solid var(--accent-sakura);
        }

        .input-area {
            background: var(--secondary-bg);
            border-top: var(--panel-border);
            padding: 1.5rem;
            box-shadow: var(--shadow-medium);
        }

        .input-container {
            display: flex;
            gap: 1rem;
            max-width: 1200px;
            margin: 0 auto;
        }

        .message-input {
            flex: 1;
            padding: 1rem 1.25rem;
            border: 2px solid var(--border-color);
            border-radius: 50px;
            background: var(--primary-bg);
            color: var(--text-primary);
            font-size: 0.95rem;
            font-family: inherit;
            outline: none;
            transition: all 0.2s ease;
            resize: none;
            min-height: 48px;
            max-height: 120px;
        }

        .message-input:focus {
            border-color: var(--accent-lavender);
            box-shadow: 0 0 0 3px rgba(200, 182, 226, 0.1);
        }

        .send-button {
            background: linear-gradient(135deg, var(--accent-sakura), var(--accent-lavender));
            border: none;
            border-radius: 50px;
            padding: 0.75rem 1.5rem;
            color: white;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 0.95rem;
            min-width: 80px;
            height: 48px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .send-button:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-medium);
        }

        .send-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .welcome-message {
            text-align: center;
            padding: 3rem 1.5rem;
            color: var(--text-secondary);
        }

        .welcome-title {
            font-family: 'Noto Sans JP', sans-serif;
            font-size: 1.5rem;
            font-weight: 500;
            margin-bottom: 0.5rem;
            background: linear-gradient(135deg, var(--accent-sakura), var(--accent-lavender));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .welcome-subtitle {
            font-size: 0.95rem;
            line-height: 1.5;
            margin-top: 0.5rem;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @media (max-width: 768px) {
            .header {
                padding: 1rem;
                flex-direction: column;
                gap: 1rem;
            }
            
            .header-controls {
                width: 100%;
                justify-content: center;
            }
            
            .message-bubble {
                max-width: 85%;
            }
            
            .input-area {
                padding: 1rem;
            }
            
            .input-container {
                gap: 0.75rem;
            }
        }

        .chat-messages::-webkit-scrollbar {
            width: 6px;
        }

        .chat-messages::-webkit-scrollbar-track {
            background: var(--secondary-bg);
        }

        .chat-messages::-webkit-scrollbar-thumb {
            background: var(--accent-lavender);
            border-radius: 3px;
        }

        .chat-messages::-webkit-scrollbar-thumb:hover {
            background: var(--accent-sakura);
        }
    </style>
</head>
<body>
    <!-- Header -->
    <div class="header">
        <h1 class="logo">Anime/Superhero GPT</h1>
        <div class="header-controls">
            <select id="character" class="character-select">
                {% for char in characters %}
                <option value="{{ char.name }}" data-traits="{{ char.traits }}">{{ char.name }}</option>
                {% endfor %}
            </select>
            <button class="theme-toggle" id="themeToggle">
                <span id="themeIcon">🌙</span>
                <span id="themeText">Dark</span>
            </button>
        </div>
    </div>

    <!-- Chat Container -->
    <div class="chat-container">
        <div class="chat-messages" id="chatMessages">
            <div class="welcome-message">
                <h2 class="welcome-title">Welcome to Anime/Superhero Chat!</h2>
                <p class="welcome-subtitle">Chat with your favorite characters from anime and superhero universes!</p>
                <p class="welcome-subtitle" id="characterTraits"></p>
            </div>
        </div>

        <!-- Input Area -->
        <div class="input-area">
            <div class="input-container">
                <textarea class="message-input" id="messageInput" placeholder="Type your message..." rows="1"></textarea>
                <button class="send-button" id="sendButton">
                    <span>Send</span>
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>
    </div>

    <script>
        // Theme toggle functionality
        const themeToggle = document.getElementById('themeToggle');
        const themeIcon = document.getElementById('themeIcon');
        const themeText = document.getElementById('themeText');
        const body = document.body;
        const characterSelect = document.getElementById('character');
        const characterTraits = document.getElementById('characterTraits');

        let isDark = true;
        body.setAttribute('data-theme', 'dark');

        themeToggle.addEventListener('click', () => {
            isDark = !isDark;
            if (isDark) {
                body.setAttribute('data-theme', 'dark');
                themeIcon.textContent = '☀️';
                themeText.textContent = 'Light';
            } else {
                body.removeAttribute('data-theme');
                themeIcon.textContent = '🌙';
                themeText.textContent = 'Dark';
            }
        });

        // Update character traits
        function updateCharacterTraits() {
            const selectedOption = characterSelect.options[characterSelect.selectedIndex];
            const traits = selectedOption.dataset.traits;
            characterTraits.textContent = `${selectedOption.text}'s traits: ${traits}`;
        }

        characterSelect.addEventListener('change', updateCharacterTraits);
        updateCharacterTraits(); // Initial update

        // Chat functionality
        const chatMessages = document.getElementById('chatMessages');
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        let isProcessing = false;

        messageInput.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = Math.min(this.scrollHeight, 120) + 'px';
        });

        messageInput.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        sendButton.addEventListener('click', sendMessage);

        async function sendMessage() {
            const message = messageInput.value.trim();
            const char = characterSelect.value;
            if (!message || isProcessing) return;

            isProcessing = true;
            sendButton.disabled = true;

            // Remove welcome message if it exists
            const welcomeMessage = document.querySelector('.welcome-message');
            if (welcomeMessage) {
                welcomeMessage.remove();
            }

            // Add user message
            addMessage(message, 'user');
            
            // Clear input
            messageInput.value = '';
            messageInput.style.height = 'auto';

            try {
                const res = await fetch('/chat', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({message: message, character: char})
                });
                const data = await res.json();
                addMessage(data.reply, 'ai', char);
            } catch (error) {
                addMessage('Sorry, there was an error processing your message.', 'ai', char);
            }

            isProcessing = false;
            sendButton.disabled = false;
        }

        function addMessage(content, type, character = '') {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${type}`;
            
            const bubble = document.createElement('div');
            bubble.className = 'message-bubble';
            
            const messageContent = document.createElement('div');
            messageContent.className = 'message-content';
            
            if (type === 'ai') {
                messageContent.innerHTML = parseMarkdown(content);
            } else {
                messageContent.innerHTML = escapeHtml(content);
            }
            
            bubble.appendChild(messageContent);
            messageDiv.appendChild(bubble);
            chatMessages.appendChild(messageDiv);
            
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        function parseMarkdown(text) {
            return text
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                .replace(/\*(.*?)\*/g, '<em>$1</em>')
                .replace(/^### (.*$)/gm, '<h3>$1</h3>')
                .replace(/^## (.*$)/gm, '<h2>$1</h2>')
                .replace(/^# (.*$)/gm, '<h1>$1</h1>')
                .replace(/^- (.*$)/gm, '<li>$1</li>')
                .replace(/^\d+\. (.*$)/gm, '<li>$1</li>')
                .replace(/(<li>.*<\/li>)/s, '<ul>$1</ul>')
                .replace(/^> (.*$)/gm, '<blockquote>$1</blockquote>')
                .replace(/`(.*?)`/g, '<code>$1</code>')
                .replace(/\[(.*?)\]\((.*?)\)/g, '<a href="$2" target="_blank">$1</a>')
                .replace(/\n/g, '<br>');
        }
    </script>
</body>
</html>
